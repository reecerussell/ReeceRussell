{"version":3,"file":"static/webpack/static/development/pages/tech.js.418ff891575e635823c4.hot-update.js","sources":["webpack:///./pages/tech.js"],"sourcesContent":["import { Row, Col } from \"reactstrap\";\nimport Layout from \"../components/Layout\";\nimport \"../static/css/tech.css\";\n\nconst Tech = _ => (\n    <Layout>\n        <Row tag=\"section\">\n            <Col md={{ offset: \"3\", size: \"6\" }}>\n                <h1 className=\"display-4 text-center\">Tech Stack</h1>\n                <div\n                    className=\"tab\"\n                    style={{\n                        left: \"50%\",\n                        transform: \"translateX(-50%)\",\n                        width: \"20px\",\n                        height: \"4px\",\n                    }}\n                />\n                <div className=\"text-justify\">\n                    <p>\n                        So, I decided to make a new website. I wanted to use a\n                        technology that I haven't used before. As I love\n                        JavaScript, React was the obvious choice!\n                    </p>\n                    <h4>Frontend</h4>\n                    <p>\n                        Server-side rendering: React is great, however, React\n                        being rendered on the server is better! I achieved this\n                        using the Next JS framework.\n                    </p>\n                    <p>\n                        Clearly, I needed to host this somewhere. Never having\n                        used Next JS or hosting anything like this, it took a\n                        while to figure out.\n                    </p>\n                    <p>\n                        After painstakingly searching all over Google, I found a\n                        way to host my new website: Node and Express! Having\n                        never used Next JS or Node before this became quite\n                        confusing.\n                    </p>\n                    <p>\n                        Then I needed to get Node running with IIS. Cue,\n                        IISNode, my saviour. It almost got to a point where I\n                        was just going to use ASP.NET Core and an MVC approach.\n                    </p>\n                    <p>\n                        All which was left for the frontend was to hook it up to\n                        some form of CMS or backend!\n                    </p>\n                    <h4>Backend</h4>\n                    <p>Now this is where things got interesting.</p>\n                    <p>\n                        Go... I thought Golang would be a good idea. It was\n                        definetly an experience, to say the least, but I've\n                        grown to love it! The syntax and how to do things in\n                        general are quite different to what I'm used to but I\n                        really enjoyed it.\n                    </p>\n                    <p>\n                        As I designed the backend as a RESTful API, it needed\n                        some form of authentication. For this I created a\n                        service for JSON web tokens (JWT), using ASP.NET Core\n                        and Identity v3 - JWT works nicely with almost anything\n                        so it tied in quite nice for the backend.\n                    </p>\n                    <p>\n                        The data is all stored using Microsoft SQL Server\n                        Express, which has been a nice, yet interesting, change\n                        from MySql.\n                    </p>\n                    <h4>More</h4>\n                    <p>\n                        All hosted on Windows with IIS! Docker is the next step!\n                    </p>\n                </div>\n            </Col>\n        </Row>\n    </Layout>\n);\n\nexport default Tech;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AASA;AAAA;AAdA;AACA;AA4EA;;;;A","sourceRoot":""}