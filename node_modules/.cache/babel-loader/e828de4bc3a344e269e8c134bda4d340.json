{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from 'react';\nimport { Row, Col } from 'reactstrap';\nimport Layout from '../components/Layout';\nimport '../static/css/projects.css';\nimport fetch from 'isomorphic-unfetch';\n\nvar Project =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Project, _React$Component);\n\n  function Project(props) {\n    _classCallCheck(this, Project);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Project).call(this, props));\n  }\n\n  _createClass(Project, [{\n    key: \"render\",\n    value: function render() {\n      var descriptionParagraphs = [];\n      var descriptionArr = this.props.description.split('\\n');\n\n      for (var i = 0; i < descriptionArr.length; i++) {\n        var paragraph = descriptionArr[i];\n        if (paragraph === \"\") continue;\n        descriptionParagraphs.push(paragraph);\n      }\n\n      return React.createElement(Layout, null, React.createElement(Row, {\n        style: {\n          padding: \"75px 0 50px 0\"\n        }\n      }, React.createElement(Col, {\n        md: {\n          offset: \"3\",\n          size: \"6\"\n        }\n      }, React.createElement(\"img\", {\n        src: this.props.imageUrl,\n        style: {\n          width: \"100%\"\n        }\n      }), React.createElement(\"h1\", null, this.props.id), React.createElement(\"br\", null), React.createElement(\"p\", {\n        style: {\n          textAlign: \"center\"\n        }\n      }, React.createElement(\"a\", {\n        href: this.props.githubLink,\n        className: \"btn-source\"\n      }, \"View Source\")), React.createElement(\"br\", null), React.createElement(\"div\", {\n        className: \"text-justify\"\n      }, descriptionParagraphs.map(function (description, key) {\n        return React.createElement(\"p\", {\n          key: key\n        }, description);\n      })))));\n    }\n  }]);\n\n  return Project;\n}(React.Component);\n\nProject.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var res, query, data, proj;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            res = _ref.res, query = _ref.query;\n            console.log(query);\n            _context.next = 4;\n            return fetch(\"https://go.reecerussell.com/api/projects/\" + query.id);\n\n          case 4:\n            data = _context.sent;\n            _context.next = 7;\n            return data.json();\n\n          case 7:\n            proj = _context.sent;\n\n            if (!(res && query.slug.toLowerCase() != proj.name.toLowerCase())) {\n              _context.next = 12;\n              break;\n            }\n\n            res.statusCode = 404;\n            res.end();\n            return _context.abrupt(\"return\");\n\n          case 12:\n            return _context.abrupt(\"return\", proj);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Project;","map":{"version":3,"sources":["/Users/reecerussell/Projects/ReeceRussellReact/reecerussell/pages/project.js"],"names":["React","Row","Col","Layout","fetch","Project","props","descriptionParagraphs","descriptionArr","description","split","i","length","paragraph","push","padding","offset","size","imageUrl","width","id","textAlign","githubLink","map","key","Component","getInitialProps","res","query","console","log","data","json","proj","slug","toLowerCase","name","statusCode","end"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,GAAb,QAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAO,4BAAP;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;IAEMC,O;;;;;AAEF,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA,gFACTA,KADS;AAElB;;;;6BAEQ;AACL,UAAIC,qBAAqB,GAAG,EAA5B;AACA,UAAMC,cAAc,GAAG,KAAKF,KAAL,CAAWG,WAAX,CAAuBC,KAAvB,CAA6B,IAA7B,CAAvB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,cAAc,CAACI,MAAnC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,YAAIE,SAAS,GAAGL,cAAc,CAACG,CAAD,CAA9B;AAEA,YAAIE,SAAS,KAAK,EAAlB,EACI;AAEJN,QAAAA,qBAAqB,CAACO,IAAtB,CAA2BD,SAA3B;AACH;;AAED,aACI,oBAAC,MAAD,QACI,oBAAC,GAAD;AAAK,QAAA,KAAK,EAAE;AAACE,UAAAA,OAAO,EAAC;AAAT;AAAZ,SACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE;AAACC,UAAAA,MAAM,EAAC,GAAR;AAAaC,UAAAA,IAAI,EAAC;AAAlB;AAAT,SAEI;AAAK,QAAA,GAAG,EAAE,KAAKX,KAAL,CAAWY,QAArB;AAA+B,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAC;AAAP;AAAtC,QAFJ,EAII,gCAAK,KAAKb,KAAL,CAAWc,EAAhB,CAJJ,EAI4B,+BAJ5B,EAKI;AAAG,QAAA,KAAK,EAAE;AAACC,UAAAA,SAAS,EAAC;AAAX;AAAV,SACI;AAAG,QAAA,IAAI,EAAE,KAAKf,KAAL,CAAWgB,UAApB;AAAgC,QAAA,SAAS,EAAC;AAA1C,uBADJ,CALJ,EAOQ,+BAPR,EAQI;AAAK,QAAA,SAAS,EAAC;AAAf,SACKf,qBAAqB,CAACgB,GAAtB,CAA0B,UAACd,WAAD,EAAce,GAAd;AAAA,eACvB;AAAG,UAAA,GAAG,EAAEA;AAAR,WAAcf,WAAd,CADuB;AAAA,OAA1B,CADL,CARJ,CADJ,CADJ,CADJ;AAoBH;;;;EAvCiBT,KAAK,CAACyB,S;;AA0C5BpB,OAAO,CAACqB,eAAR;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgBC,YAAAA,GAAhB,QAAgBA,GAAhB,EAAqBC,KAArB,QAAqBA,KAArB;AACtBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AADsB;AAAA,mBAELxB,KAAK,CAAC,8CAA8CwB,KAAK,CAACR,EAArD,CAFA;;AAAA;AAElBW,YAAAA,IAFkB;AAAA;AAAA,mBAILA,IAAI,CAACC,IAAL,EAJK;;AAAA;AAIlBC,YAAAA,IAJkB;;AAAA,kBAMlBN,GAAG,IACHC,KAAK,CAACM,IAAN,CAAWC,WAAX,MAA4BF,IAAI,CAACG,IAAL,CAAUD,WAAV,EAPV;AAAA;AAAA;AAAA;;AAQlBR,YAAAA,GAAG,CAACU,UAAJ,GAAiB,GAAjB;AACAV,YAAAA,GAAG,CAACW,GAAJ;AATkB;;AAAA;AAAA,6CAafL,IAbe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AAgBA,eAAe5B,OAAf","sourcesContent":["import React from 'react';\nimport {Row, Col} from 'reactstrap';\nimport Layout from '../components/Layout';\nimport '../static/css/projects.css';\nimport fetch from 'isomorphic-unfetch';\n\nclass Project extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let descriptionParagraphs = [];\n        const descriptionArr = this.props.description.split('\\n')\n\n        for (let i = 0; i < descriptionArr.length;i++) {\n            let paragraph = descriptionArr[i];\n\n            if (paragraph === \"\")\n                continue;\n\n            descriptionParagraphs.push(paragraph);\n        }\n\n        return (\n            <Layout>\n                <Row style={{padding:\"75px 0 50px 0\"}}>\n                    <Col md={{offset:\"3\", size:\"6\"}}>\n                        \n                        <img src={this.props.imageUrl} style={{width:\"100%\"}} />\n                        \n                        <h1>{this.props.id}</h1><br />\n                        <p style={{textAlign:\"center\"}}>\n                            <a href={this.props.githubLink} className=\"btn-source\">View Source</a>\n                        </p><br />\n                        <div className=\"text-justify\">\n                            {descriptionParagraphs.map((description, key) => (\n                                <p key={key}>{description}</p>\n                            ))}\n                        </div>                   \n                    </Col>\n                </Row>\n            </Layout>\n        );\n    }\n}\n\nProject.getInitialProps = async function({res, query}) {\n    console.log(query);\n    var data = await fetch(\"https://go.reecerussell.com/api/projects/\" + query.id);\n\n    var proj = await data.json();\n\n    if (res && \n        query.slug.toLowerCase() != proj.name.toLowerCase()) {\n        res.statusCode = 404\n        res.end()\n        return;\n    }\n\n    return proj;\n}\n\nexport default Project"]},"metadata":{},"sourceType":"module"}